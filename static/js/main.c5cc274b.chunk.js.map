{"version":3,"sources":["globe.js","index.js"],"names":["GlobalData","props","useState","xhr","XMLHttpRequest","data","newCountriesData","addEventListener","JSON","parse","responseText","map","covidCountry","latLonCountryData","countries","find","country","alpha3","mergedCountryData","push","MergeData","setCovidData","open","send","LoadCovidData","covidData","useEffect","script","document","createElement","src","async","body","appendChild","removeChild","globeImageUrl","bumpImageUrl","backgroundImageUrl","pointsData","pointLabel","d","cases","todayCases","deaths","todayDeaths","pointLat","pointLng","pointColor","pointAltitude","labelsData","labelLat","labelLng","labelText","ReactDOM","render","getElementById"],"mappings":"40wBA8FgBA,EAzFI,SAACC,GAAS,IAAD,EACSC,oBAAS,kBAiB3C,WAGI,IAAIC,EAAM,IAAIC,eACVC,EAAO,GACPC,EAAmB,GAEvBH,EAAII,iBAAiB,QAAQ,WAGzBF,EAAOG,KAAKC,MAAMN,EAAIO,cACtBJ,EA1BR,SAAmBD,GAEf,IAAIC,EAAmB,GASrB,OAPFD,EAAKM,KAAI,SAACC,GACR,IAAIC,EAAoBC,EAAUC,MAAK,SAACC,GAAW,OAAOA,EAAQA,UAAYJ,EAAaI,SACtFA,EAAQC,SAAWL,KAClBM,EAAiB,2BAAON,GAAiBC,GAC7CP,EAAiBa,KAAKD,MAGjBZ,EAecc,CAAUf,GAC7BgB,EAAaf,MAQjB,OAJAH,EAAImB,KAAK,MAFG,sDAIZnB,EAAIoB,OAEGjB,EArCoCkB,MADtB,mBAClBC,EADkB,KACPJ,EADO,KAmEzB,OA1BAK,qBAAU,WACN,IAAIC,EAASC,SAASC,cAAc,UAoBpC,OAnBAF,EAAOG,IAAM,mDACbH,EAAOI,OAAQ,EACfH,SAASI,KAAKC,YAAYN,IAE1BA,EAASC,SAASC,cAAc,WACzBC,IAAM,2DACbH,EAAOI,OAAQ,EACfH,SAASI,KAAKC,YAAYN,IAE1BA,EAASC,SAASC,cAAc,WACzBC,IAAM,+BACbH,EAAOI,OAAQ,EACfH,SAASI,KAAKC,YAAYN,IAE1BA,EAASC,SAASC,cAAc,WACzBC,IAAM,iBACbH,EAAOI,OAAQ,EACfH,SAASI,KAAKC,YAAYN,GAEnB,WACLC,SAASI,KAAKE,YAAYP,MAE3B,IAGD,kBAAC,IAAD,CAEYQ,cAAc,sDACdC,aAAa,yDACbC,mBAAmB,oDAEnBC,WAAYb,EACdc,WAAY,SAACC,GAAQ,MAAM,GAAN,OAAUA,EAAExB,QAAZ,yBAAoCwB,EAAEC,MAAtC,gCAAmED,EAAEE,WAArE,0BAAiGF,EAAEG,OAAnG,oDACEH,EAAEI,cACvBC,SAAW,WACXC,SAAW,YACXC,WAAc,SAACP,GAAD,OAAMA,EAAEC,MAAM,IAAS,UAAW,WAChDO,cAAiB,SAAAR,GAAC,OAAIA,EAAEC,MAAQ,KAEhCQ,WAAcxB,EACdyB,SAAW,WACXC,SAAW,YACXC,UAAa,SAACZ,GAAD,OAAMA,EAAExB,YCpFzCqC,IAASC,OACP,kBAAC,EAAD,MACA1B,SAAS2B,eAAe,W","file":"static/js/main.c5cc274b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport Globe from 'react-globe.gl';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css'\r\nimport countries  from './contries.json'\r\n\r\nconst GlobalData = ((props)=>{\r\n    const [covidData, setCovidData] = useState(()=>LoadCovidData())\r\n\r\n    function MergeData(data)\r\n    {\r\n        let newCountriesData = [];\r\n\r\n        data.map((covidCountry)=>{\r\n          let latLonCountryData = countries.find((country)=>{return country.country === covidCountry.country \r\n            || country.alpha3 === covidCountry})            \r\n            let mergedCountryData = {...covidCountry, ...latLonCountryData};\r\n            newCountriesData.push(mergedCountryData);\r\n          })\r\n\r\n          return newCountriesData;\r\n        \r\n    }\r\n\r\n    function LoadCovidData()\r\n    {\r\n        // create a new XMLHttpRequest\r\n        var xhr = new XMLHttpRequest()\r\n        let data = [];\r\n        let newCountriesData = []\r\n        // get a callback when the server responds\r\n        xhr.addEventListener('load', () => {\r\n            \r\n          // update the state of the component with the result here\r\n            data = JSON.parse(xhr.responseText);\r\n            newCountriesData = MergeData(data);\r\n            setCovidData(newCountriesData);\r\n          });\r\n        const url = 'https://coronavirus-19-api.herokuapp.com/countries';\r\n        // open the request with the verb and the url\r\n        xhr.open('GET',url )\r\n        // send the request\r\n        xhr.send()\r\n         \r\n        return newCountriesData;\r\n    }\r\n\r\n    useEffect(() => {\r\n        let script = document.createElement('script');\r\n        script.src = \"//unpkg.com/react@16/umd/react.production.min.js\";\r\n        script.async = true;\r\n        document.body.appendChild(script);\r\n\r\n        script = document.createElement('script');\r\n        script.src = \"//unpkg.com/react-dom@16/umd/react-dom.production.min.js\";\r\n        script.async = true;\r\n        document.body.appendChild(script);\r\n\r\n        script = document.createElement('script');\r\n        script.src = \"//unpkg.com/babel-standalone\";\r\n        script.async = true;\r\n        document.body.appendChild(script);\r\n\r\n        script = document.createElement('script');\r\n        script.src = \"//unpkg.com/d3\";\r\n        script.async = true;\r\n        document.body.appendChild(script);\r\n\r\n        return () => {\r\n          document.body.removeChild(script);\r\n        }\r\n      }, []);\r\n      \r\n    return(\r\n        <Globe\r\n                    \r\n                    globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-night.jpg\"\r\n                    bumpImageUrl=\"//unpkg.com/three-globe/example/img/earth-topology.png\"\r\n                    backgroundImageUrl=\"//unpkg.com/three-globe/example/img/night-sky.png\"\r\n\r\n                    pointsData={covidData}\r\n                  pointLabel={(d)=>{   return `${d.country} <br>  Cases: ${d.cases} <br> Today's Cases: ${d.todayCases} <br> Deaths : ${d.deaths}\r\n                  <br> Todays Deaths : ${d.todayDeaths}`  }}\r\n                    pointLat = \"latitude\"\r\n                    pointLng = \"longitude\"\r\n                    pointColor = {(d)=> d.cases>200000 ? '#8B0000': '#ffffaa'}\r\n                    pointAltitude = {d => d.cases / 20000000}\r\n\r\n                    labelsData = {covidData}\r\n                    labelLat = \"latitude\"\r\n                    labelLng = \"longitude\"\r\n                    labelText = {(d)=> d.country}\r\n    />\r\n    )\r\n})\r\nexport  default GlobalData;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n//import Weather from './weather'\r\nimport GlobalData from './globe'\r\n//import IndiaMap from './IndiaMap'\r\n\r\nReactDOM.render(\r\n  <GlobalData />,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}